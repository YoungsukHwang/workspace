import java.util.ArrayList;

public class Prime {
	Node[][] mat;
	
	public Prime(Node[][] nodeMat){
		this.mat = nodeMat;
	}
	
	public void MST(){
		Node start = mat[19+2][19+2];
		
		MinHeapPrime heap = new MinHeapPrime(4000);
		ArrayList<Node> chosenNodes= new ArrayList<>();
		ArrayList<Edge> chosenEdges= new ArrayList<>();
		
		chosenNodes.add(start);
		for(Edge e : start.links)
			heap.insert(e);
		
		while(chosenEdges.size()<359){
			Edge chosen = heap.delMin();
			//if chosen edge is toward inside of the tree, skip it and delMin another.
			boolean outside = true;
			for(Node n : chosenNodes)
				if( n.equals(chosen.dest))
					outside = false;
			//if it is towards outside. Add it to chosenEdges and it's destination into chosenNodes.
			if(outside){
				chosenEdges.add(chosen);
				chosenNodes.add(chosen.dest);
				for(Edge e: chosen.dest.links)
					heap.insert(e);
			}
		}
		System.out.println(chosenEdges.size());
		double totalWeight=0;
		for(int i=0; i<chosenEdges.size(); i++){
			System.out.println(chosenNodes.get(i).getCoordinate()+"<->"+chosenEdges.get(i).dest.getCoordinate());
			totalWeight+=chosenEdges.get(i).weight;
		}
		System.out.println(totalWeight);
	}

}
