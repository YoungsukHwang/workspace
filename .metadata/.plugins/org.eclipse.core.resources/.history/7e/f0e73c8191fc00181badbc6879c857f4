
public class Dijkstra {
	Node[][] mat;

	public Dijkstra() {

	}
	public Dijkstra(Node[][] nodeMat) {
		this.mat = nodeMat;
	}
	
	public void SSSP(){
		Node start = mat[2][2];
		MinHeap heap = new MinHeap(400);
		
		start.dval = 0;
		heap.insert(start);
		for(int i=0; i<mat.length;i++)
			for(int j=0; j<mat[0].length;j++)
				if(mat[i][j]!=null && !(i==2&&j==2) ){
					mat[i][j].dval = Double.MAX_VALUE;
					heap.insert(mat[i][j]);
				}
		
		Coordinate[][] pre = new Coordinate[20][20];
		while(heap.getSize()>0){
			Node current = heap.delMin();
			for(Edge e: current.links)
				if(heap.hasNode(e.dest)!=-1 &&  current.dval+e.weight<e.dest.dval){
					heap.changeKey(e.dest, current.dval+e.weight);
					pre[e.dest.getX()][e.dest.getY()] = new Coordinate(current.getX(), current.getY());
				}
		}
		System.out.println("SSSP done "+heap.getSize());
		
		for(int i=0; i<mat.length;i++)
			for(int j=0; j<mat[0].length;j++)
				if(mat[i][j]!=null)
					heap.insert(mat[i][j]);
		
		for(int i=1; i<= 360; i++){
			Node n = heap.delMin();
			System.out.println("(0-0) "+"to "+n.getCoordinate()+" dval:"+n.dval+" Path:"+findPath(new Coordinate(n.getX(), n.getY()), pre, new String()));
		}
		System.out.println("SSSP done");
		Node n = heap.delMin();
	}
	
	public String findPath(Coordinate n, Coordinate[][] pre, String str){
		if(n==null)
			return null;
		Coordinate p = pre[n.x][n.y];
		
		return str;
	}
	

}
