import java.util.ArrayList;

public class Prime {
	Node[][] mat;
	
	public Prime(Node[][] nodeMat){
		this.mat = nodeMat;
	}
	
	public void MST(){
		Node start = mat[19+2][19+2];
		
		MinHeapPrime heap = new MinHeapPrime(4000);
		ArrayList<Node> chosenNodes= new ArrayList<>();
		ArrayList<Edge> chosenEdges= new ArrayList<>();
		
		chosenNodes.add(start);
		for(Edge e : start.links)
			heap.insert(e);
		Edge first = heap.delMin();
		chosenEdges.add(first);
		chosenNodes.add(first.dest);
		
		while(chosenEdges.size()<360){
			Edge chosen = heap.delMin();
			//if chosen edge is toward inside of the tree, skip it and delMin another.
			boolean outside = true;
			for(Node n : chosenNodes)
				if(chosen.dest.equals(n))
					outside = false;
			//if it is towards outside. Add it to chosenEdges and it's destination into chosenNodes.
			if(outside){
				chosen.dest
			}
			
			heap.insert(k);
		}
		
	}

}
