import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

public class MathTree {
	public static void main(String[] args) throws IOException {
		// Read inpostfix.txt
		File file = new File("src/inpostfix.txt"); // for eclipse
		// File file = new File("inpostfix.txt"); //for run on terminal.
		Scanner sc = new Scanner(file);

		String[] line = new String[3];
		String[] result = new String[3];

		for (int i = 0; i < 3; i++) {
			line[i] = sc.nextLine();
			System.out.println(line[i]);
		}

		Scanner scan = new Scanner(line[0]);
		String rest = new String();
		String fix = scan.next();
		while (scan.hasNext())
			rest += scan.next();

		//Build Tree
		if (fix.equals("p")) {
			result[0] = toInfix(rest);
		} else if (fix.equals("i")) {
			result[0] = toPostfix(rest);
		}
		
		// printout outfix.txt
		FileWriter fileWriter = new FileWriter("outfix.txt");
		fileWriter.write(" ");// result[0]
		fileWriter.close();

	}

	public static String toInfix(String postfix) {
		String result= new String();
		Node root = buildPostEval(postfix);
		
		return result;
	}

	private static Node buildPostEval(String postfix) {
		Scanner s = new Scanner(postfix);
		myStack stack = new myStack(); 
		while(s.hasNext()){
			String next = s.next();
			if (next.matches("[A-Z]")) {
				stack.push( new Node(next) );
			} else { 
				Node op1 = (Node) stack.pop();
				Node op2 = (Node) stack.pop();
				Node operator = new Node(next);
				operator.left = op1;
				operator.right = op2;
			}	
		}
		Node root = (Node) stack.pop();
		return root;
	}

	public static String toPostfix(String infix) {
		
		return infix;
	}
}
